{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Lists",
    "description" : "CRUD operations to manage lists and list memberships",
    "version" : "v3"
  },
  "servers" : [ {
    "url" : "https://api.hubapiqa.com"
  } ],
  "tags" : [ {
    "name" : "Memberships"
  } ],
  "paths" : {
    "/crm/v3/lists/{listId}/memberships/add-and-remove" : {
      "put" : {
        "tags" : [ "Memberships" ],
        "summary" : "Add and/or Remove Records from a List",
        "description" : "Add and/or remove records that have already been created in the system to and/or from the list.\nThis endpoint only works with lists that have a `processingType` of `MANUAL` or `SNAPSHOT`.",
        "operationId" : "put-/crm/v3/lists/{listId}/memberships/add-and-remove",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The ID of the list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MembershipChangeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MembershipsUpdateResponse"
                },
                "example" : {
                  "recordIdsAdded" : [ 123, 456 ],
                  "recordIdsMissing" : [ 789 ],
                  "recordIdsRemoved" : [ 654 ]
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read", "crm.lists.write" ]
        }, {
          "oauth2" : [ "crm.lists.read", "crm.lists.write" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/memberships/add-from/{sourceListId}" : {
      "put" : {
        "tags" : [ "Memberships" ],
        "summary" : "Add All Records from a Source List to a Destination List",
        "description" : "Add all of the records from a source list (specified by the `sourceListId`) to a destination list (specified by the `listId`).\nRecords that are already members of the destination list will be ignored. The destination and source list IDs must be different. The\ndestination and source lists must contain records of the same type (e.g. contacts, companies, etc.).",
        "operationId" : "put-/crm/v3/lists/{listId}/memberships/add-from/{sourceListId}",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The ID of the destination list, which the source list records are added to.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sourceListId",
          "in" : "path",
          "description" : "The ID of the source list to grab the records from, which are then added to the destination list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Operation successful",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read", "crm.lists.write" ]
        }, {
          "oauth2" : [ "crm.lists.read", "crm.lists.write" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/memberships" : {
      "get" : {
        "tags" : [ "Memberships" ],
        "summary" : "Fetch List Memberships Ordered by Record ID",
        "description" : "Fetch list memberships in order sorted by the `recordId` of the records in the list.\nThe `recordId`s are ordered in ascending order if an `after` offset is provided.\nThe `after` parameter will take precedence over `before` if both are provided.",
        "operationId" : "get-/crm/v3/lists/{listId}/memberships",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The ID of the list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The paging offset token for the page that comes `after` the previously requested records.\nIf provided, then the records in the response will be the records following the offset,\nsorted in ascending order. Takes precedence over the `before` offset.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The paging offset token for the page that comes `before` the previously requested records.\nIf provided, then the records in the response will be the records preceding the offset,\nsorted in descending order.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of records to return in the response. The maximum `limit` is 250.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionResponseLong"
                },
                "example" : {
                  "results" : [ 202, 232, 239 ],
                  "paging" : {
                    "next" : {
                      "after" : "AAAAAAAAAS0%3D",
                      "link" : "https://private.hubapi.com/crm/v3/lists/195/memberships?portalId=865747473&limit=2&after=AAAAAAAAAS0%3D"
                    },
                    "prev" : {
                      "before" : "AAAAAAAAAMk%3D",
                      "link" : "https://private.hubapi.com/crm/v3/lists/195/memberships?before=AAAAAAAAAMk%3D&portalId=865747473&limit=2"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Memberships" ],
        "summary" : "Delete All Records from a List",
        "description" : "Remove all of the records from a list.\nThis endpoint only works with lists that have a `processingType` of `MANUAL` or `SNAPSHOT`.",
        "operationId" : "delete-/crm/v3/lists/{listId}/memberships",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The ID of the list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Operation successful",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read", "crm.lists.write" ]
        }, {
          "oauth2" : [ "crm.lists.read", "crm.lists.write" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/memberships/remove" : {
      "put" : {
        "tags" : [ "Memberships" ],
        "summary" : "Remove Records from a List",
        "description" : "Remove the records provided from the list. Records that do not exist or that are not members of the list are ignored.",
        "operationId" : "put-/crm/v3/lists/{listId}/memberships/remove",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The ID of the list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MembershipsUpdateResponse"
                },
                "example" : {
                  "recordIdsRemoved" : [ 123, 456 ],
                  "recordIdsMissing" : [ 789 ]
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read", "crm.lists.write" ]
        }, {
          "oauth2" : [ "crm.lists.read", "crm.lists.write" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/memberships/add" : {
      "put" : {
        "tags" : [ "Memberships" ],
        "summary" : "Add Records to a List",
        "description" : "Add the records provided to the list. Records that do not exist or that are already members of the list are ignored.",
        "operationId" : "put-/crm/v3/lists/{listId}/memberships/add",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The ID of the list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MembershipsUpdateResponse"
                },
                "example" : {
                  "recordIdsAdded" : [ 123, 456 ],
                  "recordIdsMissing" : [ 789 ]
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read", "crm.lists.write" ]
        }, {
          "oauth2" : [ "crm.lists.read", "crm.lists.write" ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "ErrorDetail" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate"
          },
          "in" : {
            "type" : "string",
            "description" : "The name of the field or parameter in which the error was found."
          },
          "code" : {
            "type" : "string",
            "description" : "The status code associated with the error detail"
          },
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "missingScopes" : [ "scope1", "scope2" ]
            }
          }
        }
      },
      "MembershipsUpdateResponse" : {
        "required" : [ "recordIdsMissing", "recordIdsRemoved", "recordsIdsAdded" ],
        "type" : "object",
        "properties" : {
          "recordsIdsAdded" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "recordIdsRemoved" : {
            "type" : "array",
            "description" : "The IDs of the records that were `removed` from the list.",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "recordIdsMissing" : {
            "type" : "array",
            "description" : "The IDs of the records that were `missing` (e.g. did not exist in the portal) and so were not `added` or `removed`.",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "description" : "The IDs of the records that were `added`, `removed`, and/or found to be `missing` as a result of the \nmembership update request."
      },
      "MembershipChangeRequest" : {
        "required" : [ "recordIdsToAdd", "recordIdsToRemove" ],
        "type" : "object",
        "properties" : {
          "recordIdsToAdd" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "recordIdsToRemove" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "description" : "The IDs of the records to add and/or remove from a list."
      },
      "PreviousPage" : {
        "required" : [ "before" ],
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "description" : "The offset of the previous page of records."
          },
          "link" : {
            "type" : "string",
            "description" : "A direct link to the request for the previous page of records."
          }
        },
        "description" : "The cursor for the previous page of records."
      },
      "Paging" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/NextPage"
          },
          "prev" : {
            "$ref" : "#/components/schemas/PreviousPage"
          }
        },
        "description" : "The cursor to be used for paging through records."
      },
      "Error" : {
        "required" : [ "category", "correlationId", "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate",
            "example" : "An error occurred"
          },
          "correlationId" : {
            "type" : "string",
            "description" : "A unique identifier for the request. Include this value with any error reports or support tickets",
            "format" : "uuid",
            "example" : "aeb5f871-7f07-4993-9211-075dc63e7cbf"
          },
          "category" : {
            "type" : "string",
            "description" : "The error category"
          },
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "errors" : {
            "type" : "array",
            "description" : "further information about the error",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "invalidPropertyName" : [ "propertyValue" ],
              "missingScopes" : [ "scope1", "scope2" ]
            }
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A map of link names to associated URIs containing documentation about the error or recommended remediation steps"
          }
        },
        "example" : {
          "message" : "Invalid input (details will vary based on the error)",
          "correlationId" : "aeb5f871-7f07-4993-9211-075dc63e7cbf",
          "category" : "VALIDATION_ERROR",
          "links" : {
            "knowledge-base" : "https://www.hubspot.com/products/service/knowledge-base"
          }
        }
      },
      "CollectionResponseLong" : {
        "required" : [ "results" ],
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "description" : "The record IDs for the requested page of memberships.",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          }
        },
        "description" : "The results and paging cursor for a membership fetch request."
      },
      "NextPage" : {
        "required" : [ "after" ],
        "type" : "object",
        "properties" : {
          "after" : {
            "type" : "string",
            "description" : "The offset for the next page of records."
          },
          "link" : {
            "type" : "string",
            "description" : "A direct link to the request for the next page of records."
          }
        },
        "description" : "The cursor for the next page of records."
      }
    },
    "responses" : {
      "Error" : {
        "description" : "An error occurred.",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "oauth2" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://app.hubspot.com/oauth/authorize",
            "tokenUrl" : "https://api.hubapi.com/oauth/v1/token",
            "scopes" : {
              "crm.lists.read" : " ",
              "crm.lists.write" : " "
            }
          }
        }
      },
      "private_apps" : {
        "type" : "apiKey",
        "name" : "private-app",
        "in" : "header"
      }
    }
  }
}